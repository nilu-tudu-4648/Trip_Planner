import React, { useState } from "react";
import {
  StyleSheet,
  View,
  TouchableOpacity,
  BackHandler,
  ScrollView,
  TextInput,
} from "react-native";
import { COLORS, FSTYLES, SIZES, STYLES } from "../../constants/theme";
import { useForm } from "react-hook-form";
import { db } from "../../../firebaseConfig";
import { addDoc, collection, updateDoc } from "firebase/firestore";
import { FIRESTORE_COLLECTIONS } from "../../constants/data";
import * as ImagePicker from "expo-image-picker";
import {
  saveMediaToStorage,
  showToast,
} from "../../constants/functions";
import { NAVIGATION } from "../../constants/routes";
import { Avatar } from "react-native-paper";
import {
  AppLoader,
  AppText,
  AppButton,
  FormInput,
} from "../../components";
import { FontAwesome, MaterialIcons } from "@expo/vector-icons";
const CreateRoom = ({ navigation }) => {
  const [loading, setLoading] = useState(false);
  const [text, setText] = useState("");
  const [markettext, setmarketText] = useState("");
  const [amenities, setamenities] = useState([]);
  const [nearest_sabjimarket, setnearest_sabjimarket] = useState([]);
  const [roomPicsData, setroomPicsData] = useState( {'Roompic1':"",
  'Roompic2':"",
  'Roompic3':"",
'Roompic4':"",
  'Roompic5':""},);
  const handleButtonPress = () => {
    setamenities([...amenities, text]);
    setText("");
  };
  const handleButtonPressSabji = () => {
    setnearest_sabjimarket([...nearest_sabjimarket, markettext]);
    setmarketText("");
  };
  const deleteAmmentities = (text) => {
    const deleteText = amenities.filter((item) => item !== text);
    setamenities(deleteText);
    const deleteT = nearest_sabjimarket.filter((item) => item !== text);
    setnearest_sabjimarket(deleteT);
  };
  const pickImage = async (type) => {
    try {
      let result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        aspect: [4, 3],
        quality: 0.1,
        base64: true,
      });
      if (!result.canceled && result.assets && result.assets.length > 0) {
        const urlParts = result.assets[0].uri;
        const url = await saveMediaToStorage(
          urlParts,
          `/allRooms/${Math.random()}`
        );
        setroomPicsData({ ...roomPicsData, [type]: url })
        showToast("upload successfully");
      }
    } catch (error) {
      console.log(error);
    }
  };
  const {
    control,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm({
    defaultValues: {
      name: "",
      address: "",
      rentPrice: "",
      sharingType: "",
      roomFor: "",
      description: "",
      rating: "",
      distanceFromPetrolPump:""
    },
  });
  const onSubmit = async (data) => {
    const {
      name,
      address,
      rentPrice,
      sharingType,
      roomFor,
      description,
      rating,
      distanceFromPetrolPump
    } = data;

    try {
      setLoading(true);
      const roomsCollectionRef = collection(
        db,
        FIRESTORE_COLLECTIONS.All_ROOMS
      );

      const roomData = {
        roomPics:roomPicsData,
        name: name.trim(),
        address: address.trim(),
        rentPrice,
        sharingType,
        roomFor,
        description,
        rating,
        amenities,
        nearest_sabjimarket,
        distanceFromPetrolPump,
        uploaded_date: `${new Date().toString()}`,
      };

      const docRef = await addDoc(roomsCollectionRef, roomData);
      const autoGeneratedId = docRef.id;
      await updateDoc(docRef, { id: autoGeneratedId });

      showToast("Room added Successfully");
      setValue("name", "");
      setValue("address", "");
      setValue("rentPrice", "");
      setValue("sharingType", "");
      setValue("roomFor", "");
      setValue("description", "");
      setValue("rating", "");
      setValue("distanceFromPetrolPump", "");
      navigation.navigate(NAVIGATION.ADMIN_HOME)
    } catch (error) {
      console.error("Error adding rooms:", error);
      showToast("Something went wrong");
    } finally {
      setLoading(false);
    }
  };
  const rules = {
    required: "This field is mandatory",
    pattern: {
      value: /^[aA-zZ\s]+$/,
      message: "Only alphabets are allowed for this field.",
    },
  };

  BackHandler.addEventListener(
    "hardwareBackPress",
    () => {
      navigation.navigate(NAVIGATION.ADMIN_HOME);
      return () => true;
    },
    []
  );

  return (
    <View style={styles.container}>
      <AppLoader loading={loading} />
      <ScrollView
        keyboardShouldPersistTaps={"always"}
        showsVerticalScrollIndicator={false}
      >
        <AppText
          bold={true}
          style={{ alignSelf: "center", marginVertical: SIZES.h3 * 2 }}
          size={2.5}
        >
          {"Create Room"}
        </AppText>
          <ScrollView horizontal={true}>
            {
              Object.keys(roomPicsData).map((ite,i)=>(
                <TouchableOpacity
                key={i}
                style={{ ...STYLES, margin: SIZES.base }}
                onPress={() => pickImage(ite)}
              >
                {roomPicsData[ite] ? (
                  <Avatar.Image
                    size={SIZES.largeTitle * 1.7}
                    source={{ uri: roomPicsData[ite] }}
                  />
                ) : (
                  <Avatar.Icon
                    size={SIZES.largeTitle * 1.7}
                    icon="account"
                    style={{ backgroundColor: COLORS.gray }}
                  />
                )}
                <AppText>{Object.keys(roomPicsData)[i]}</AppText>
              </TouchableOpacity>
              ))
            }
          </ScrollView>
          <FormInput
            control={control}
            rules={rules}
            placeholder={"Room or Building name"}
            name="name"
          />
        <View>
          <FormInput
            control={control}
            rules={rules}
            placeholder={"Address"}
            name="address"
          />
        </View>
        <View>
          <FormInput
            control={control}
            rules={rules}
            placeholder={"Sharing Type"}
            name="sharingType"
          />
        </View>
        <View>
          <FormInput
            control={control}
            rules={rules}
            placeholder={"Room For"}
            name="roomFor"
          />
        </View>
        <View>
          <FormInput
            control={control}
            placeholder={"Distance from petrol pump"}
            name="distanceFromPetrolPump"
          />
        </View>
        <View>
          <FormInput
            control={control}
            rules={{ required: "This field is mandatory" }}
            placeholder={"Rent Price"}
            name="rentPrice"
          />
        </View>
        <View>
          <FormInput
            control={control}
            placeholder={"Add Some Description"}
            name="description"
          />
        </View>
        <View>
          <FormInput
            control={control}
            rules={{ required: "This field is mandatory" }}
            placeholder={"Rating"}
            name="rating"
          />
        </View>
        <AppText>Amenities</AppText>
        <View style={styles.inputcontainer}>
          <TextInput
            style={styles.input}
            placeholder="Enter text here..."
            value={text}
            onChangeText={setText}
          />
          <FontAwesome
            name="plus-circle"
            size={SIZES.h1*1.2}
            color="black"
            onPress={handleButtonPress}
          />
        </View>
        {amenities.map((ite, i) => (
          <View key={ite} style={{ ...FSTYLES, marginVertical: SIZES.base }}>
            <AppText>
              {i + 1}. {ite}
            </AppText>
            <MaterialIcons
              onPress={() => deleteAmmentities(ite)}
              name="delete"
              size={24}
              color={COLORS.red}
            />
          </View>
        ))}
        <AppText>Nearest market</AppText>
        <View style={styles.inputcontainer}>
          <TextInput
            style={styles.input}
            placeholder="Enter text here..."
            value={markettext}
            onChangeText={setmarketText}
          />
          <FontAwesome
            name="plus-circle"
            size={SIZES.h1*1.2}
            color="black"
            onPress={handleButtonPressSabji}
          />
        </View>
        {nearest_sabjimarket.map((ite, i) => (
          <View key={ite} style={{ ...FSTYLES, marginVertical: SIZES.base/2 }}>
            <AppText>
              {i + 1}. {ite}
            </AppText>
            <MaterialIcons
              onPress={() => deleteAmmentities(ite)}
              name="delete"
              size={24}
              color={COLORS.red}
            />
          </View>
        ))}
      </ScrollView>
      <AppButton title={"Submit"} onPress={handleSubmit(onSubmit)} />
    </View>
  );
};

export default CreateRoom;

const styles = StyleSheet.create({
  inputStyle: {
    width: "100%",
  },
  container: {
    flex: 1,
    padding: SIZES.h3,
    backgroundColor: COLORS.white,
  },
  smallText: {
    fontSize: SIZES.h6,
    alignSelf: "stretch",
  },
  inputcontainer: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 16,
    borderWidth: 1,
    borderRadius: 8,
    borderColor: "#ccc",
  },
  input: {
    flex: 1,
    paddingVertical: 10,
  },
  button: {
    paddingVertical: 12,
    paddingHorizontal: 16,
    backgroundColor: "blue",
    borderRadius: 8,
    marginLeft: 8,
  },
  buttonText: {
    color: "white",
    fontWeight: "bold",
  },
});
